{"version":3,"sources":["Game/renderer/Tile.ts","Game/math.ts","Game/Map.ts","Game/renderer/Registry.ts","Game/renderer/Resource.ts","Game/renderer/CrossSection.ts","Game/renderer/ViewCone.ts","Game/renderer/Renderer.ts","Game/index.ts","Stage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MASK","toPrecision","n","p","Math","round","TileMap","dict","chunksDicts","borders","chunkSizes","this","map","z","x","y","getKeyFromPosition","X13","Y13","firstPosition","getPositionFromKey","Object","keys","xMin","xMax","yMin","yMax","zMin","zMax","setChunksAndBorders","position","JSON","stringify","key","parse","chunkSize","a","b","c","chunkPosition","floor","getChunkKeyFromChunkPosition","getChunkPosition","forEach","chunksDict","i","getChunkKeyFromPosition","p1","p2","cp1","cp2","reducedP1","min","max","reducedP2","length","_crossSectionIsEmpty","Registry","idFields","partialEntry","idField","entry","getId","registry","Resource","name","url","imageJs","canvas","_isLoaded","process","addEntry","ImageJs","load","getCanvas","getEntry","resource","isLoaded","Tile","type","neighborhood","maskResource","tileResource","getLoadedResource","Error","makeImageJs","above","topLeft","topRight","bottomLeft","bottomRight","under","ressourceImage","maskImage","tileImage","undefined","bitDepth","setPixelXY","maskValue","getPixelXY","FTL","FTR","FBL","FBR","LSL","LST","LSB","LSR","RSR","RST","RSB","RSL","tile","CrossSection","viewConeCenter","focal","viewConeWindow","distanceFromCenter","tileMap","center","scale","window","extendedWindow","heightConstraint","crossSectionConstant","tilesDict","margin","canvas1","context1","canvas2","context2","canvas1IsMain","dx","dy","a1","a2","b1","b2","getHeightConstraint","makeTilesDict","OffscreenCanvas","extendedWidth","extendedHeight","context","getContext","imageSmoothingEnabled","tiles","every","newCanvasAndContext","crossSectionPosition","drawImage","width","height","point","getA","getB","cpp","getX","getY","getZ","cb","zMinBorder","zMaxBorder","k","ceil","k1","k2","crossSectionIsEmpty","getPosition","forEachTilePosition","getTileAt","getOrMakeTile","getTileId","getCrossSectionPosition","newViewConeCenter","image","sx","sy","sw","sh","values","ViewCone","rendererWindow","startDistanceFromCenter","zoom","crossSections","maxDistanceFromCenter","sprites","_","orderBy","crossSection","s","sprite","depth","distance","push","newCenter","move","paintCanvas","Renderer","viewCone","framesDuration","Array","fill","lastTime","frameIndex","w","h","nativeZoom","postRenderZoom","console","time","timeEnd","discover","cs","Date","now","renderLoop","t","shift","log","fps","toFixed","requestAnimationFrame","reduce","sum","d","Game","tile1Resource","tile2Resource","Stage","canvasEl","useRef","useEffect","current","start","ref","style","border","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bb84e7d7.chunk.js","sourcesContent":["import { Image as ImageJs } from 'image-js';\nimport { Registry } from './Registry';\nimport { Resource, LoadedResource } from './Resource';\n\nconst registry = new Registry<Tile>(['type', 'neighborhood']);\n\nconst MASK_RESOURCE_NAME = 'mask';\nenum MASK {\n  FTL = 64329,\n  LSL = 63735,\n  LSB = 10280,\n  LST = 62509,\n  FBL = 65277,\n  LSR = 57567,\n  FTR = 53199,\n  FBR = 0,\n  RSL = 59623,\n  RSB = 27296,\n  RST = 16824,\n  RSR = 61807,\n}\n\nexport interface TileNeighborhood {\n  above: boolean;\n  topLeft: boolean;\n  topRight: boolean;\n  bottomLeft: boolean;\n  bottomRight: boolean;\n  under: boolean;\n}\n\nexport class Tile {\n  public imageJs?: ImageJs;\n  public canvas?: HTMLCanvasElement;\n  private maskResource: LoadedResource;\n  private tileResource: LoadedResource;\n\n  constructor(public type: string, public neighborhood: TileNeighborhood) {\n    const tileResource = Resource.getLoadedResource(type);\n    if (!tileResource) {\n      throw new Error(`Resource '${type}' hasn't been loaded.`);\n    }\n    const maskResource = Resource.getLoadedResource(MASK_RESOURCE_NAME);\n    if (!maskResource) {\n      throw new Error(`Resource '${MASK_RESOURCE_NAME}' hasn't been loaded.`);\n    }\n    this.tileResource = tileResource;\n    this.maskResource = maskResource;\n\n    this.imageJs = this.makeImageJs();\n    this.canvas = this.imageJs?.getCanvas();\n\n    registry.addEntry(this);\n  }\n\n  public static getTile(type: string, neighborhood: TileNeighborhood): Tile | undefined {\n    return registry.getEntry({ type, neighborhood });\n  }\n\n  public static getOrMakeTile(type: string, neighborhood: TileNeighborhood): Tile {\n    const tile = registry.getEntry({ type, neighborhood });\n    if (tile) {\n      return tile;\n    }\n    return new Tile(type, neighborhood);\n  }\n\n  private makeImageJs(): ImageJs | undefined {\n    const { above, topLeft, topRight, bottomLeft, bottomRight, under } = this.neighborhood;\n    // const { above, topLeft, topRight, bottomLeft, bottomRight, under } = {\n    //   above: false,\n    //   topLeft: false,\n    //   topRight: false,\n    //   bottomLeft: false,\n    //   bottomRight: false,\n    //   under: false,\n    // };\n\n    if (above && bottomLeft && bottomRight) {\n      return;\n    }\n\n    const ressourceImage = this.tileResource.imageJs;\n    const maskImage = this.maskResource.imageJs;\n    // the TS declaration of ImageJs is incorrect: 3rd arg can (and must) be undefined\n    // eslint-disable-next-line\n    // @ts-ignore\n    const tileImage = new ImageJs(32, 24, undefined, {\n      bitDepth: 16,\n    });\n\n    for (let x = 0; x < 32; x++) {\n      for (let y = 0; y < 24; y++) {\n        tileImage.setPixelXY(x, y, [0, 0, 0, 0]);\n        const maskValue = maskImage.getPixelXY(x, y);\n        if (maskValue[0] === MASK.FTL) {\n          if (above === true) {\n            continue;\n          }\n          if (topLeft === false) {\n            tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y)]);\n            continue;\n          }\n          tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y + 24)]);\n          continue;\n        }\n        if (maskValue[0] === MASK.FTR) {\n          if (above === true) {\n            continue;\n          }\n          if (topRight === false) {\n            tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y)]);\n            continue;\n          }\n          tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y + 24)]);\n          continue;\n        }\n        if (maskValue[0] === MASK.FBL) {\n          if (above === true) {\n            continue;\n          }\n          if (bottomLeft === false) {\n            tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y)]);\n            continue;\n          }\n          tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y + 24)]);\n          continue;\n        }\n        if (maskValue[0] === MASK.FBR) {\n          if (above === true) {\n            continue;\n          }\n          if (bottomRight === false) {\n            tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y)]);\n            continue;\n          }\n          tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y + 24)]);\n          continue;\n        }\n        if (maskValue[0] === MASK.LSL) {\n          if (bottomLeft === true) {\n            if (above === true) {\n              continue;\n            }\n            tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y + 24)]);\n            continue;\n          }\n          if (topLeft === false) {\n            tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y)]);\n            continue;\n          }\n          tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y + 48)]);\n          continue;\n        }\n        if (maskValue[0] === MASK.LST) {\n          if (bottomLeft === true) {\n            if (above === true) {\n              continue;\n            }\n            tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y + 24)]);\n            continue;\n          }\n          if (above === false) {\n            tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y)]);\n            continue;\n          }\n          tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y + 48)]);\n          continue;\n        }\n        if (maskValue[0] === MASK.LSB) {\n          if (bottomLeft === true) {\n            if (above === true) {\n              continue;\n            }\n            tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y + 24)]);\n            continue;\n          }\n          if (under === false) {\n            tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y)]);\n            continue;\n          }\n          tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y + 48)]);\n          continue;\n        }\n        if (maskValue[0] === MASK.LSR) {\n          if (bottomLeft === true) {\n            if (above === true) {\n              continue;\n            }\n            tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y + 24)]);\n            continue;\n          }\n          if (bottomRight === false) {\n            tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y)]);\n            continue;\n          }\n          tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y + 48)]);\n          continue;\n        }\n        if (maskValue[0] === MASK.RSR) {\n          if (bottomRight === true) {\n            if (above === true) {\n              continue;\n            }\n            tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y + 24)]);\n            continue;\n          }\n          if (topRight === false) {\n            tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y)]);\n            continue;\n          }\n          tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y + 48)]);\n          continue;\n        }\n        if (maskValue[0] === MASK.RST) {\n          if (bottomRight === true) {\n            if (above === true) {\n              continue;\n            }\n            tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y + 24)]);\n            continue;\n          }\n          if (above === false) {\n            tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y)]);\n            continue;\n          }\n          tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y + 48)]);\n          continue;\n        }\n        if (maskValue[0] === MASK.RSB) {\n          if (bottomRight === true) {\n            if (above === true) {\n              continue;\n            }\n            tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y + 24)]);\n            continue;\n          }\n          if (under === false) {\n            tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y)]);\n            continue;\n          }\n          tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y + 48)]);\n          continue;\n        }\n        if (maskValue[0] === MASK.RSL) {\n          if (bottomRight === true) {\n            if (above === true) {\n              continue;\n            }\n            tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y + 24)]);\n            continue;\n          }\n          if (bottomLeft === false) {\n            tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y)]);\n            continue;\n          }\n          tileImage.setPixelXY(x, y, [...ressourceImage.getPixelXY(x, y + 48)]);\n          continue;\n        }\n      }\n    }\n\n    return tileImage;\n  }\n}\n","export const toPrecision = (n: number, p = 3): number => {\n  return Math.round(n * 10 ** p) / 10 ** p;\n};\n","import { Position } from './interfaces';\nimport { toPrecision as p } from './math';\n\ninterface ChunkPosition {\n  a: number;\n  b: number;\n  c: number;\n}\n\nexport interface Borders {\n  xMin: number;\n  xMax: number;\n  yMin: number;\n  yMax: number;\n  zMin: number;\n  zMax: number;\n}\n\nexport class TileMap {\n  private dict: {\n    [key: string]: number;\n  } = {};\n  private chunksDicts: {\n    [key: string]: boolean;\n  }[];\n\n  public borders: Borders;\n  private chunkSizes = [40, 20, 10, 5];\n  constructor() {\n    // TODO load from JSON\n\n    this.chunksDicts = this.chunkSizes.map(() => ({}));\n\n    const X01 = -2;\n    const Y01 = -2;\n    const X11 = 2;\n    const Y11 = 2;\n    const Z0 = -100;\n    const Z1 = 0;\n\n    for (let z = Z0; z <= Z1; z++) {\n      for (let x = X01; x <= X11; x++) {\n        for (let y = Y01; y <= Y11; y++) {\n          this.dict[this.getKeyFromPosition({ x, y, z })] = 1;\n        }\n      }\n    }\n\n    const X02 = -100;\n    const Y02 = -100;\n    const X12 = 100;\n    const Y12 = 100;\n    const Z2 = -103;\n    const Z22 = -100;\n\n    for (let z = Z2; z <= Z22; z++) {\n      for (let x = X02; x <= X12; x++) {\n        for (let y = Y02; y <= Y12; y++) {\n          if ((x + y) % 2 === -1) {\n            //continue;\n          }\n          this.dict[this.getKeyFromPosition({ x, y, z })] = 1;\n        }\n      }\n    }\n\n    const i = 50;\n    const X03 = -4 + i;\n    const Y03 = 0 + i;\n    const X13 = 0 + i;\n    const Y13 = 4 + i;\n\n    for (let x = X03; x <= X13; x++) {\n      for (let y = Y03; y <= Y13; y++) {\n        this.dict[this.getKeyFromPosition({ x, y, z: 2 * i })] = 1;\n      }\n    }\n    this.dict[this.getKeyFromPosition({ x: X13 - 1, y: Y13 + 1, z: 2 * i })] = 1;\n    this.dict[this.getKeyFromPosition({ x: X13 - 3, y: Y13 + 1, z: 2 * i })] = 1;\n    this.dict[this.getKeyFromPosition({ x: X13 - 1, y: Y13 + 2, z: 2 * i })] = 1;\n    this.dict[this.getKeyFromPosition({ x: X13 - 3, y: Y13 + 2, z: 2 * i })] = 1;\n    this.dict[this.getKeyFromPosition({ x: X13 - 2, y: Y13 + 2, z: 2 * i })] = 1;\n\n    const firstPosition = this.getPositionFromKey(Object.keys(this.dict)[0]);\n    this.borders = {\n      xMin: firstPosition.x,\n      xMax: firstPosition.x,\n      yMin: firstPosition.y,\n      yMax: firstPosition.y,\n      zMin: firstPosition.z,\n      zMax: firstPosition.z,\n    };\n\n    this.setChunksAndBorders();\n  }\n\n  private getKeyFromPosition(position: Position): string {\n    return JSON.stringify(position);\n  }\n\n  private getPositionFromKey(key: string): Position {\n    return JSON.parse(key);\n  }\n\n  private getChunkPosition(chunkSize: number, position: Position): ChunkPosition {\n    return {\n      a: p((position.y - position.x) / chunkSize),\n      b: p((position.y + position.x + position.z / 3) / chunkSize),\n      c: p(position.z / chunkSize),\n    };\n  }\n\n  private getChunkKeyFromChunkPosition(chunkPosition: ChunkPosition): string {\n    return JSON.stringify({\n      a: Math.floor(chunkPosition.a),\n      b: Math.floor(chunkPosition.b),\n      c: Math.floor(chunkPosition.c),\n    });\n  }\n\n  private getChunkKeyFromPosition(chunkSize: number, position: Position): string {\n    return this.getChunkKeyFromChunkPosition(this.getChunkPosition(chunkSize, position));\n  }\n\n  public getTileAt(position: Position): number {\n    return this.dict[this.getKeyFromPosition(position)];\n  }\n\n  public setChunksAndBorders(): void {\n    Object.keys(this.dict).forEach((key) => {\n      const position = this.getPositionFromKey(key);\n      if (position.x < this.borders.xMin) {\n        this.borders.xMin = position.x;\n      }\n      if (position.x > this.borders.xMax) {\n        this.borders.xMax = position.x;\n      }\n      if (position.y < this.borders.yMin) {\n        this.borders.yMin = position.y;\n      }\n      if (position.y > this.borders.yMax) {\n        this.borders.yMax = position.y;\n      }\n      if (position.z < this.borders.zMin) {\n        this.borders.zMin = position.z;\n      }\n      if (position.z > this.borders.zMax) {\n        this.borders.zMax = position.z;\n      }\n      this.chunksDicts.forEach((chunksDict, i) => {\n        chunksDict[this.getChunkKeyFromPosition(this.chunkSizes[i], position)] = true;\n      });\n    });\n  }\n\n  public _crossSectionIsEmpty(chunksDict: any, chunkSize: number, p1: Position, p2: Position): boolean {\n    const cp1 = this.getChunkPosition(chunkSize, p1);\n    const cp2 = this.getChunkPosition(chunkSize, p2);\n    for (let a = Math.floor(cp1.a); a <= cp2.a; a++) {\n      for (let c = Math.floor(cp1.c); c <= cp2.c; c++) {\n        if (chunksDict[this.getChunkKeyFromChunkPosition({ a, b: cp1.b, c })]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  public crossSectionIsEmpty(p1: Position, p2: Position): boolean {\n    const reducedP1 = {\n      ...p1,\n      z: Math.min(this.borders.zMax, Math.max(this.borders.zMin, p1.z)),\n    };\n    const reducedP2 = {\n      ...p2,\n      z: Math.min(this.borders.zMax, Math.max(this.borders.zMin, p2.z)),\n    };\n    for (let i = 0; i < this.chunksDicts.length; i++) {\n      if (this._crossSectionIsEmpty(this.chunksDicts[i], this.chunkSizes[i], reducedP1, reducedP2) === true) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n","export class Registry<T> {\n  private dict: { [id: string]: T } = {};\n\n  constructor(public idFields: Array<keyof T>) {}\n\n  private getId(partialEntry: Partial<T>): string {\n    const key: Partial<T> = {};\n    this.idFields.forEach((idField) => {\n      key[idField] = partialEntry[idField];\n    });\n    return JSON.stringify(key);\n  }\n\n  public addEntry(entry: T): void {\n    this.dict[this.getId(entry)] = entry;\n  }\n\n  public getEntry(partialEntry: Partial<T>): T | undefined {\n    return this.dict[this.getId(partialEntry)];\n  }\n}\n","import { Image as ImageJs } from 'image-js';\nimport { Registry } from './Registry';\n\nconst registry = new Registry<Resource>(['name']);\n\nexport interface LoadedResource extends Resource {\n  imageJs: ImageJs;\n}\n\nexport class Resource {\n  private url: string;\n  public imageJs?: ImageJs;\n  public canvas?: HTMLCanvasElement;\n  private _isLoaded = false;\n  constructor(public name: string) {\n    this.url = `${process.env.PUBLIC_URL}/${name}.png`;\n\n    registry.addEntry(this);\n  }\n\n  public isLoaded(): this is LoadedResource {\n    return this._isLoaded;\n  }\n\n  public async load(): Promise<void> {\n    const imageJs: ImageJs = await ImageJs.load(this.url);\n    this.imageJs = imageJs;\n    this.canvas = this.imageJs.getCanvas();\n    this._isLoaded = true;\n  }\n\n  public static getResource(name: string): Resource | undefined {\n    return registry.getEntry({ name });\n  }\n\n  public static getLoadedResource(name: string): LoadedResource | undefined {\n    const resource = registry.getEntry({ name });\n    if (!resource || !resource.isLoaded()) {\n      return;\n    }\n    return resource;\n  }\n}\n","import { Window, Position, CrossSectionPosition } from '../interfaces';\nimport { TileMap } from '../Map';\nimport { Tile, TileNeighborhood } from './Tile';\n\nexport interface Sprite {\n  image: OffscreenCanvas;\n  sx: number;\n  sy: number;\n  sw: number;\n  sh: number;\n}\n\nexport interface PositionedTile {\n  position: Position;\n  crossSectionPosition: CrossSectionPosition;\n  tile: Tile;\n}\n\nexport interface TilesDict {\n  [key: string]: PositionedTile;\n}\n\nexport class CrossSection {\n  public center: Position;\n  public scale: number;\n  public window: Window;\n  public extendedWindow: Window;\n  public heightConstraint: number;\n  public crossSectionConstant: number;\n  private tilesDict: TilesDict;\n  private margin: number;\n  public canvas1?: OffscreenCanvas;\n  private context1?: OffscreenCanvasRenderingContext2D;\n  private canvas2?: OffscreenCanvas;\n  private context2?: OffscreenCanvasRenderingContext2D;\n  private canvas1IsMain = true;\n\n  private dx = 0;\n  private dy = 0;\n\n  constructor(\n    public viewConeCenter: Position,\n    public focal: number,\n    public viewConeWindow: Window,\n    public distanceFromCenter: number,\n    public tileMap: TileMap,\n  ) {\n    this.center = {\n      x: viewConeCenter.x - distanceFromCenter / 8,\n      y: viewConeCenter.y - distanceFromCenter / 8,\n      z: viewConeCenter.z - distanceFromCenter / 4,\n    };\n\n    this.scale = 1 + distanceFromCenter / focal;\n\n    this.window = {\n      a1: Math.round(viewConeWindow.a1 * this.scale),\n      a2: Math.round(viewConeWindow.a2 * this.scale),\n      b1: Math.round(viewConeWindow.b1 * this.scale),\n      b2: Math.round(viewConeWindow.b2 * this.scale),\n    };\n\n    this.margin = 32;\n    this.extendedWindow = {\n      a1: this.window.a1 - this.margin,\n      a2: this.window.a2 + this.margin,\n      b1: this.window.b1 - this.margin,\n      b2: this.window.b2 + this.margin,\n    };\n\n    this.heightConstraint = CrossSection.getHeightConstraint(viewConeCenter.z - distanceFromCenter);\n\n    this.crossSectionConstant = this.center.x + this.center.y + this.center.z / 3;\n\n    this.tilesDict = this.makeTilesDict();\n  }\n\n  public get sprite(): Sprite | undefined {\n    if (!this.canvas) {\n      return;\n    }\n    return {\n      image: this.canvas,\n      sx: this.margin + this.dx,\n      sy: this.margin + this.dy,\n      sw: this.canvas.width - 2 * this.margin,\n      sh: this.canvas.height - 2 * this.margin,\n    };\n  }\n\n  public get canvas() {\n    return this.canvas1IsMain ? this.canvas1 : this.canvas2;\n  }\n\n  private get context() {\n    return this.canvas1IsMain ? this.context1 : this.context2;\n  }\n\n  private newCanvasAndContext(): { canvas: OffscreenCanvas; context: OffscreenCanvasRenderingContext2D } {\n    const canvas = new OffscreenCanvas(this.extendedWidth, this.extendedHeight);\n    const context = canvas.getContext('2d');\n    if (!context) {\n      throw new Error(`Context cannot be null`);\n    }\n    context.imageSmoothingEnabled = false;\n    return { canvas, context };\n  }\n\n  public paintCanvas(): void {\n    const tiles = this.tiles;\n    if (tiles.length === 0) {\n      return;\n    }\n    if (tiles.every(({ tile }) => !tile.canvas)) {\n      return;\n    }\n\n    if (!this.context) {\n      const { canvas: canvas1, context: context1 } = this.newCanvasAndContext();\n      this.canvas1 = canvas1;\n      this.context1 = context1;\n      const { canvas: canvas2, context: context2 } = this.newCanvasAndContext();\n      this.canvas2 = canvas2;\n      this.context2 = context2;\n    }\n    //this.context.globalAlpha = 0.3;\n    tiles.forEach(({ crossSectionPosition: { a, b }, tile }) => {\n      if (!tile.canvas || !this.context) {\n        return;\n      }\n      this.context.drawImage(\n        tile.canvas,\n        this.extendedWidth / 2 + (a - 16),\n        this.extendedHeight / 2 + (-b - 8),\n        tile.canvas.width,\n        tile.canvas.height,\n      );\n    });\n  }\n\n  public static getHeightConstraint(z: number): number {\n    return (3 + (z % 3)) % 3;\n  }\n\n  public getA({ x, y }: { x: number; y: number }): number {\n    return 16 * (y - this.center.y - (x - this.center.x));\n  }\n  public getB({ z }: { z: number }): number {\n    return (32 / 3) * (z - this.center.z);\n  }\n\n  public getCrossSectionPosition(point: Position): CrossSectionPosition {\n    return {\n      a: this.getA(point),\n      b: this.getB(point),\n    };\n  }\n\n  public getProjetedCrossSectionPosition(point: Position): CrossSectionPosition {\n    return {\n      a: this.getA(point) / this.scale,\n      b: this.getB(point) / this.scale,\n    };\n  }\n\n  public getX({ a, b }: CrossSectionPosition): number {\n    return this.center.x - a / 32 - b / 64;\n  }\n  public getY({ a, b }: CrossSectionPosition): number {\n    return this.center.y + a / 32 - b / 64;\n  }\n  public getZ({ b }: { b: number }): number {\n    return this.center.z + (3 * b) / 32;\n  }\n\n  public getPosition(cpp: CrossSectionPosition): Position {\n    return {\n      x: this.getX(cpp),\n      y: this.getY(cpp),\n      z: this.getZ(cpp),\n    };\n  }\n\n  public forEachTilePosition(cb: (position: Position) => void, zMinBorder?: number, zMaxBorder?: number): void {\n    const { a1, a2, b1, b2 } = this.extendedWindow;\n\n    const k = this.heightConstraint;\n\n    // first integer z in the area\n    let zMin = Math.ceil(this.getZ({ b: b1 }));\n    if (zMinBorder && zMinBorder > zMin) {\n      zMin = zMinBorder;\n    }\n    // first multiple of ki after zMin\n    const k1 = CrossSection.getHeightConstraint(zMin);\n    if (k1 !== k) {\n      zMin = zMin + CrossSection.getHeightConstraint(k - k1);\n    }\n\n    // last integer z in the area\n    let zMax = Math.floor(this.getZ({ b: b2 }));\n    if (zMaxBorder && zMaxBorder < zMax) {\n      zMax = zMaxBorder;\n    }\n    // last multiple of ki before zMax\n    const k2 = CrossSection.getHeightConstraint(zMax);\n    if (k2 !== k) {\n      zMax = zMax - CrossSection.getHeightConstraint(-k + k2);\n    }\n\n    for (let z = zMin; z <= zMax; z += 3) {\n      const b = this.getB({ z });\n      // first integer y in the line z of the area\n      const yMin = Math.ceil(this.getY({ a: a1, b }));\n      // last integer y in the line z of the area\n      const yMax = Math.floor(this.getY({ a: a2, b }));\n      for (let y = yMin; y <= yMax; y++) {\n        const x = Math.round(this.crossSectionConstant - y - z / 3);\n        cb({ x, y, z });\n      }\n    }\n  }\n\n  public get width(): number {\n    return this.window.a2 - this.window.a1;\n  }\n\n  public get height(): number {\n    return this.window.b2 - this.window.b1;\n  }\n  public get extendedWidth(): number {\n    return this.extendedWindow.a2 - this.extendedWindow.a1;\n  }\n\n  public get extendedHeight(): number {\n    return this.extendedWindow.b2 - this.extendedWindow.b1;\n  }\n\n  public get tiles(): PositionedTile[] {\n    return Object.values(this.tilesDict);\n  }\n\n  public static getTileId(position: Position): string {\n    return JSON.stringify(position);\n  }\n\n  public makeTilesDict(): TilesDict {\n    const tilesDict: TilesDict = {};\n    const tileMap = this.tileMap;\n\n    // check if it may be useless to do anything\n    const { a1, a2, b1, b2 } = this.extendedWindow;\n    if (tileMap.crossSectionIsEmpty(this.getPosition({ a: a1, b: b1 }), this.getPosition({ a: a2, b: b2 }))) {\n      return tilesDict;\n    }\n\n    this.forEachTilePosition(\n      (position) => {\n        const value = tileMap.getTileAt(position);\n        if (value) {\n          const neighborhood: TileNeighborhood = {\n            above: tileMap.getTileAt({ ...position, z: position.z + 1 }) === 1,\n            bottomLeft: tileMap.getTileAt({ ...position, x: position.x + 1 }) === 1,\n            bottomRight: tileMap.getTileAt({ ...position, y: position.y + 1 }) === 1,\n            topLeft: tileMap.getTileAt({ ...position, y: position.y - 1 }) === 1,\n            topRight: tileMap.getTileAt({ ...position, x: position.x - 1 }) === 1,\n            under: tileMap.getTileAt({ ...position, z: position.z - 1 }) === 1,\n          };\n          const tile = Tile.getOrMakeTile('tile2', neighborhood);\n          tilesDict[CrossSection.getTileId(position)] = {\n            position,\n            crossSectionPosition: this.getCrossSectionPosition(position),\n            tile,\n          };\n        }\n      },\n      tileMap.borders.zMin,\n      tileMap.borders.zMax,\n    );\n\n    return tilesDict;\n  }\n\n  public move(newViewConeCenter: Position): void {\n    this.center = {\n      x: newViewConeCenter.x - this.distanceFromCenter / 8,\n      y: newViewConeCenter.y - this.distanceFromCenter / 8,\n      z: newViewConeCenter.z - this.distanceFromCenter / 4,\n    };\n\n    this.dx += 1;\n\n    // if (!this.canvas2 || !this.canvas1) {\n    //   return;\n    // }\n    // if (this.canvas1IsMain) {\n    //   this.context2?.clearRect(0, 0, this.canvas2.width, this.canvas2.height);\n    //   this.context2?.drawImage(this.canvas1, -32, 0);\n    // } else {\n    //   this.context1?.clearRect(0, 0, this.canvas1.width, this.canvas1.height);\n    //   this.context1?.drawImage(this.canvas2, -32, 0);\n    // }\n    // this.canvas1IsMain = !this.canvas1IsMain;\n  }\n}\n","import { Window, Position } from '../interfaces';\nimport { CrossSection } from './CrossSection';\nimport { TileMap } from '../Map';\nimport _ from 'lodash';\nimport { Sprite } from './Renderer';\n\nexport class ViewCone {\n  public crossSections: CrossSection[] = [];\n  private maxDistanceFromCenter: number;\n  public sprites: Sprite[] = [];\n  public canvas: OffscreenCanvas;\n  public context: OffscreenCanvasRenderingContext2D;\n\n  constructor(\n    public center: Position,\n    public focal: number,\n    public rendererWindow: Window,\n    public startDistanceFromCenter: number,\n    public tileMap: TileMap,\n    public zoom: number,\n  ) {\n    this.maxDistanceFromCenter = startDistanceFromCenter - 1;\n\n    const { canvas, context } = this.newCanvasAndContext();\n    this.canvas = canvas;\n    this.context = context;\n  }\n\n  private newCanvasAndContext(): { canvas: OffscreenCanvas; context: OffscreenCanvasRenderingContext2D } {\n    const canvas = new OffscreenCanvas(this.width * this.zoom, this.height * this.zoom);\n    const context = canvas.getContext('2d');\n    if (!context) {\n      throw new Error(`Context cannot be null`);\n    }\n    context.imageSmoothingEnabled = false;\n    return { canvas, context };\n  }\n\n  public paintCanvas(): void {\n    const orderedCrossSections = _.orderBy(this.crossSections, ['distanceFromCenter'], ['desc']);\n    orderedCrossSections.forEach((crossSection) => {\n      const s = crossSection.sprite;\n      if (s) {\n        this.context.drawImage(s.image, s.sx, s.sy, s.sw, s.sh, 0, 0, this.canvas.width, this.canvas.height);\n      }\n    });\n  }\n\n  public get window(): Window {\n    return {\n      a1: this.rendererWindow.a1 / this.zoom,\n      a2: this.rendererWindow.a2 / this.zoom,\n      b1: this.rendererWindow.b1 / this.zoom,\n      b2: this.rendererWindow.b2 / this.zoom,\n    };\n  }\n\n  public discover(depth: number): void {\n    const maxDistanceFromCenter = this.maxDistanceFromCenter;\n    for (let distance = maxDistanceFromCenter + 1; distance <= maxDistanceFromCenter + depth; distance++) {\n      const crossSection = new CrossSection(this.center, this.focal, this.window, distance, this.tileMap);\n      this.crossSections.push(crossSection);\n      this.maxDistanceFromCenter = distance - 1;\n    }\n  }\n\n  public get width(): number {\n    return this.window.a2 - this.window.a1;\n  }\n\n  public get height(): number {\n    return this.window.b2 - this.window.b1;\n  }\n\n  public move(newCenter: Position): void {\n    this.center = newCenter;\n    this.crossSections.forEach((crossSection) => {\n      crossSection.move(newCenter);\n    });\n    this.paintCanvas();\n  }\n}\n","import { TileMap } from '../Map';\nimport { Window, Position } from '../interfaces';\nimport { ViewCone } from './ViewCone';\n\nexport interface Sprite {\n  image: HTMLCanvasElement | HTMLImageElement | OffscreenCanvas;\n  x: number;\n  y: number;\n  scale: number;\n}\n\nexport class Renderer {\n  private context: CanvasRenderingContext2D;\n  private viewCone: ViewCone;\n\n  private framesDuration: number[] = [...Array(30)].fill(0);\n  private lastTime = 0;\n  private frameIndex = 0;\n\n  constructor(public canvas: HTMLCanvasElement, public tileMap: TileMap) {\n    const context = this.canvas.getContext('2d');\n    if (!context) {\n      throw new Error(`Context cannot be null`);\n    }\n    context.imageSmoothingEnabled = false;\n    this.context = context;\n\n    const center: Position = { x: -2, y: -2, z: 0 };\n    const w = this.canvas.width;\n    const h = this.canvas.height;\n    const zoom = 4;\n    const zoomQuality = 1;\n    const nativeZoom = zoom ** zoomQuality;\n    const postRenderZoom = zoom ** (1 - zoomQuality);\n    const window: Window = {\n      a1: -w / 2 / postRenderZoom,\n      a2: w / 2 / postRenderZoom,\n      b1: -h / 2 / postRenderZoom,\n      b2: h / 2 / postRenderZoom,\n    };\n\n    console.time('new ViewCone');\n    this.viewCone = new ViewCone(center, 1000, window, -500, tileMap, nativeZoom);\n    console.timeEnd('new ViewCone');\n    console.time('discover');\n    this.viewCone.discover(2000);\n    console.timeEnd('discover');\n    console.time('sprite');\n    this.viewCone.crossSections.forEach((cs) => cs.paintCanvas());\n    this.viewCone.paintCanvas();\n    console.timeEnd('sprite');\n\n    this.lastTime = Date.now();\n    this.renderLoop();\n  }\n\n  private get fps() {\n    return (this.framesDuration.length / this.framesDuration.reduce((sum, d) => sum + d, 0)) * 1000;\n  }\n\n  public renderLoop() {\n    const t = Date.now() - this.lastTime;\n    this.lastTime = Date.now();\n    this.framesDuration.push(t);\n    this.framesDuration.shift();\n\n    if (this.frameIndex++ % 30 === 0) {\n      console.log(this.fps.toFixed(1));\n    }\n\n    this.paintCanvas();\n\n    this.viewCone.move({ x: 0, y: 0, z: 0 });\n    requestAnimationFrame(() => this.renderLoop());\n  }\n\n  public paintCanvas() {\n    this.context.drawImage(this.viewCone.canvas, 0, 0, this.canvas.width, this.canvas.height);\n  }\n}\n","import { TileMap } from './Map';\nimport { Resource } from './renderer/Resource';\nimport { Renderer } from './renderer/Renderer';\n\nexport class Game {\n  constructor(private readonly canvas: any) {}\n\n  async start(): Promise<void> {\n    const tile1Resource = new Resource('tile1');\n    await tile1Resource.load();\n    const tile2Resource = new Resource('tile2');\n    await tile2Resource.load();\n    const maskResource = new Resource('mask');\n    await maskResource.load();\n\n    const tileMap = new TileMap();\n    const renderer = new Renderer(this.canvas, tileMap);\n  }\n}\n","import React, { useRef, useEffect } from 'react';\nimport { Game } from './Game';\n\nconst Stage = (): JSX.Element => {\n  const canvasEl = useRef(null);\n  useEffect(() => {\n    if (!canvasEl || !canvasEl.current) {\n      return;\n    }\n    const game = new Game(canvasEl.current);\n    game.start();\n  }, [canvasEl]);\n\n  return (\n    <>\n      <canvas\n        width={1600}\n        height={800}\n        ref={canvasEl}\n        style={{\n          border: '1px solid black',\n          margin: '20px',\n        }}\n      />\n    </>\n  );\n};\n\nexport default Stage;\n","import React from 'react';\nimport Stage from './Stage';\n\nconst App = (): JSX.Element => {\n  return (\n    <div>\n      <p>IME</p>\n      <Stage />\n    </div>\n  );\n};\n\nexport default App;\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}